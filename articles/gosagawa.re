
# この記事の要約

アプリケーションを実装するにあたり、エラーハンドリングは非常に重要です。
しかし、エラー管理がデフォルトでは非常にシンプルです、カスタマイズをしなければ不便であるところは欠点でありつつもの、逆にしっかりとカスタマイズをすれば
非常に強力なツールとなりえます。この記事ではpkg/errorsライブラリや、GopherCon2019でのセッション"Handling go errors",そしてAthensプロジェクトでのエラーハンドリングでの
実例を通して、実用にみあったエラーハンドリング処理の書き方をお伝えできればと思っています

# エラーハンドリングで満たしたい要件

# エラーハンドリングがうまく行っていない

業務で書いてみた。
→エラーが追いづらいので階層化はした
→うまく階層化されておらず、２階層下のエラー情報が取れない
→pkg/errorsで書き直した。

# pkg/errorsでできる事を正しく理解する
## pkg/errorsライブラリでできる事
## pkg/errorsはどのように階層化したエラーの起点のエラーをを取得して？
## pkg/errorsはどのようにスタックトレースをとっているか？
## pkg/errorsライブラリできない事

# error handling in goで述べられていた事

## pkg/errorsライブラリできない事

# athensのエラーハンドリング

# まとめ

# 参考

